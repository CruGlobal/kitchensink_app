name: Dev Install Test
on:
  push:
    branches: [is/update]
  pull_request:
    branches: [master]
  workflow_dispatch:
jobs:
  Dev-Install-Test:
    name: Dev Install & Test on Node ${{ matrix.node }} [${{ matrix.os }}]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # gh macos runnners does not come with docker, could not get it installed
        # see: https://github.community/t/is-it-possible-to-install-and-configure-docker-on-macos-runner/16981/3
        # windows runner does not suppport linux containers
        # see:
        os: [ubuntu-latest] #, windows-latest] #,macos-latest]
        node: [18, 20, 21]
    env:
         CYPRESS_RESPONSE_TIMEOUT: 200000
         CYPRESS_DEFAULT_COMMAND_TIMEOUT: 30000
         CYPRESS_RETRIES: 2
    steps:
      # - name: Install Docker (Macos)
      #   if: ${{ matrix.os == 'macos-latest'}}
      #   run: |
      #     brew install docker-machine docker
      #     docker-machine create default
      #     docker-machine env default
      #     eval "$(docker-machine env default)"
      #     docker ps

      - name: Checkout ab-cli
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'

      - name: Install npm packages
        run: npm i

      - name: Initialize docker swarm
        run: docker swarm init --advertise-addr 127.0.0.1

      - name: Install AppBuilder
        env:
          TENANT_PASSWORD: "admin"
        run: |
          echo "Installing AppBuilder with secure password..."
          node index.js install ab --stack=ab --port=8080 --tag=latest --dbExpose=true --dbPort=8888 --dbPassword=root --authType=login --relayEnabled=false --siteURL=http://localhost:8080 --tenant.username=admin --tenant.password=$TENANT_PASSWORD --tenant.email=admin@email.com --tenant.url=http://localhost:8080 --platform=podman

      # Give some time for the stack to come down fully
      - run: sleep 15

      - name: Launch Main Stack
        run: ./UP.sh -t -q
        working-directory: ./ab

      - name: Wait for AB (Main Stack)
        uses: ifaxity/wait-on-action@v1
        with:
          resource: http://localhost:8080
          timeout: 300000

      - name: Test Login 1
        run: |
          curl -X POST http://localhost:8080/auth/login \
            -H "Content-Type: application/json" \
            -d '{"tenant":"admin","email":"admin@email.com","password":"admin"}'
        working-directory: ./ab

      - name: Reset Test Environment
        run: npm run test:reset ab
        working-directory: ./ab

      - name: Reset via API
        run: |
          curl -X POST http://localhost:8080/test/reset \
            -H "Content-Type: application/json" \
            -d '{"tenant":"admin"}'
        working-directory: ./ab

      - name: Test Login post reset
        run: |
          curl -X POST http://localhost:8080/auth/login \
            -H "Content-Type: application/json" \
            -d '{"tenant":"admin","email":"admin@email.com","password":"admin"}'
        working-directory: ./ab

      - name: Run Cypress Tests (Main Stack)
        run: npm run test:e2e:ab-runtime -- --browser chrome
        working-directory: ./ab

      - name: Take Down Main Stack
        run: ./Down.sh
        working-directory: ./ab

      - name: Run Cypress Tests
        run: npm run test:e2e:app -- --browser chrome
        working-directory: ./ab

      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots
          path: ./ab/test/e2e/cypress/screenshots
      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: ABServices.log
          path: ./ab/logs/ABServices.log
      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: ABServices.log
          path: ./ab-test/logs/ABServices.log

      # - name: Take Down Test Stack
        # run: node ../index.js test down ab
